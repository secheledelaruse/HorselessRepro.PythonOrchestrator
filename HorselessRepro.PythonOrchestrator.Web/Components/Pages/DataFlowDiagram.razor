@using System.Timers
@using System.Text
@inject BlobServiceClient blobClient
@inject QueueServiceClient queueServiceClient
@rendermode InteractiveServer

<h3>Data Flow Diagram</h3>
<div class="dataflow-diagram-container">
    <svg width="100%" height="400" viewBox="0 0 1100 400" style="background:#f9f9f9; display:block;">
        <defs>
            <marker id="arrowhead" markerWidth="10" markerHeight="7"
                    refX="10" refY="3.5" orient="auto" markerUnits="strokeWidth">
                <polygon points="0 0, 10 3.5, 0 7" fill="#1976d2" />
            </marker>
        </defs>
        <!-- Timer Trigger Node -->
        <g>
            <rect x="40" y="160" width="180" height="100" rx="15" fill="#1976d2" />
            <text x="130" y="185" fill="white" text-anchor="middle" font-size="16" font-weight="bold">Timer Trigger</text>
            <foreignObject x="50" y="195" width="160" height="60">
                <div class="node-message">@timerMessage</div>
            </foreignObject>
        </g>
        <!-- Blob Storage Node -->
        <g>
            <rect x="270" y="40" width="220" height="100" rx="15" fill="#388e3c" />
            <text x="380" y="65" fill="white" text-anchor="middle" font-size="16" font-weight="bold">Blob Storage</text>
            <foreignObject x="280" y="80" width="200" height="50">
                <div class="node-message">@blobMessage</div>
            </foreignObject>
        </g>
        <!-- Queue Node -->
        <g>
            <rect x="270" y="280" width="220" height="100" rx="15" fill="#fbc02d" />
            <text x="380" y="305" fill="black" text-anchor="middle" font-size="16" font-weight="bold">Queue</text>
            <foreignObject x="280" y="320" width="200" height="50">
                <div class="node-message">@queueItems</div>
            </foreignObject>
        </g>
        <!-- Queue Trigger Node -->
        <g>
            <rect x="540" y="280" width="220" height="100" rx="15" fill="#8e24aa" />
            <text x="650" y="305" fill="white" text-anchor="middle" font-size="16" font-weight="bold">Queue Trigger</text>
            <foreignObject x="550" y="320" width="200" height="50">
                <div class="node-message">@queueTriggerMessage</div>
            </foreignObject>
        </g>
        <!-- CosmosDB Node -->
        <g>
            <rect x="770" y="160" width="180" height="100" rx="15" fill="#d32f2f" />
            <text x="860" y="185" fill="white" text-anchor="middle" font-size="16" font-weight="bold">CosmosDB</text>
            <foreignObject x="780" y="195" width="160" height="60">
                <div class="node-message">@cosmosDbMessage</div>
            </foreignObject>
        </g>

        <!-- Animated Edges -->
        <g>
            <!-- Timer -> Blob -->
            <line x1="220" y1="180" x2="270" y2="90" class="animated-edge" />
            <!-- Timer -> Queue -->
            <line x1="220" y1="240" x2="270" y2="330" class="animated-edge" />
            <!-- Queue -> QueueTrigger -->
            <line x1="490" y1="330" x2="540" y2="330" class="animated-edge" />
            <!-- QueueTrigger -> CosmosDB -->
            <line x1="760" y1="330" x2="770" y2="210" class="animated-edge" />
        </g>
    </svg>
</div>

@code {
    private string timerMessage = "Timer fires every 5s.\nGenerates and stores a message.";
    private string blobMessage = "Loading...";
    private string queueItems = "Loading...";
    private string queueTriggerMessage = "QueueTrigger updates message and writes to CosmosDB.";
    private string cosmosDbMessage = "Loading...";
    private System.Timers.Timer? refreshTimer;

    protected override void OnInitialized()
    {
        refreshTimer = new System.Timers.Timer(2000);
        refreshTimer.Elapsed += async (_, __) => await RefreshData();
        refreshTimer.AutoReset = true;
        refreshTimer.Start();
    }

    private async Task RefreshData()
    {
        blobMessage = await GetBlobMessageAsync();
        queueItems = await GetQueueItemsAsync();
        cosmosDbMessage = await GetCosmosDbMessageAsync();
        // Optionally, update queueTriggerMessage if you have a function for it
        await InvokeAsync(StateHasChanged);
    }

    private Task<string> GetCosmosDbMessageAsync() => Task.FromResult("CosmosDB message here");

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }

    protected async Task<string> GetBlobMessageAsync()
    {
        var currentBlobMessage = string.Empty;
        var containerClient = this.blobClient.GetBlobContainerClient("reprocontainer");
        var blobClient = containerClient.GetBlobClient("reproblob.txt");

        if (await blobClient.ExistsAsync())
        {
            var response = await blobClient.DownloadContentAsync();
            currentBlobMessage = response.Value.Content.ToString();
        }
        else
        {
            currentBlobMessage = "Blob does not exist.";
        }

        return currentBlobMessage;
    }

    protected async Task<string> GetQueueItemsAsync()
    {
        var reflectedBlobMessage = "This message is passed through the Python queue function.";
        var queueClient = queueServiceClient.GetQueueClient("myqueue-items");
        if (await queueClient.ExistsAsync())
        {
            var messages = await queueClient.ReceiveMessagesAsync(1);
            if (messages.Value.Length > 0)
            {
                string base64Message = messages.Value[0].MessageText;
                try
                {
                    byte[] data = Convert.FromBase64String(base64Message);
                    reflectedBlobMessage = Encoding.UTF8.GetString(data);
                }
                catch (FormatException)
                {
                    // Not a Base64 string, use as-is
                    reflectedBlobMessage = base64Message;
                }
            }
            else
            {
                reflectedBlobMessage = "No messages in the queue.";
            }
        }
        else
        {
            reflectedBlobMessage = "Queue does not exist.";
        }

        return reflectedBlobMessage;
    }
}