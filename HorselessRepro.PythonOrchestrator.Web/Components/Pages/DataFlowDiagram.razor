@using System.Timers
@using System.Text
@using HorselessRepro.PythonOrchestrator.Models
@using Microsoft.Azure.Cosmos
@inject BlobServiceClient blobClient
@inject QueueServiceClient queueServiceClient
@inject CosmosClient cosmosClient
@inject WeatherApiClient WeatherApiClient

@rendermode InteractiveServer

<h3>Data Flow Diagram</h3>
<div>
    <button class="btn btn-secondary" @onclick="ZoomOut">-</button>
    <button class="btn btn-secondary" @onclick="ZoomIn">+</button>
    <span class="ms-2">Zoom: @($"{zoomLevel:P0}")</span>
</div>
<div class="dataflow-diagram-container"
     @onmouseup="OnMouseUp"
     @onmouseleave="OnMouseUp"
     @onmousemove="OnMouseMove">
    <svg width="100%" height="600" viewBox="0 0 1400 600" style="background:#f9f9f9; display:block;"
         @onwheel="OnWheel"
         @onmousedown="OnMouseDown">
        <g style="transform: translate(@panXpx, @panYpx) scale(@zoomLevel); transform-origin: 0 0;">
            <defs>
                <marker id="arrowhead" markerWidth="10" markerHeight="7"
                        refX="10" refY="3.5" orient="auto" markerUnits="strokeWidth">
                    <polygon points="0 0, 10 3.5, 0 7" fill="#1976d2" />
                </marker>
            </defs>
            <!-- Timer Trigger Node -->
            <g>
                <rect x="40" y="250" width="250" height="150" rx="20" fill="#1976d2" />
                <text x="165" y="285" fill="white" text-anchor="middle" font-size="20" font-weight="bold">Timer Trigger</text>
                <foreignObject x="55" y="300" width="220" height="80">
                    <div class="node-message">@timerMessage</div>
                </foreignObject>
            </g>
            <!-- Blob Storage Node -->
            <g>
                <rect x="350" y="60" width="320" height="150" rx="20" fill="#388e3c" />
                <text x="510" y="95" fill="white" text-anchor="middle" font-size="20" font-weight="bold">Blob Storage</text>
                <foreignObject x="365" y="120" width="290" height="80">
                    <div class="node-message">@blobMessage</div>
                </foreignObject>
            </g>
            <!-- Queue Node -->
            <g>
                <rect x="350" y="400" width="320" height="150" rx="20" fill="#fbc02d" />
                <text x="510" y="435" fill="black" text-anchor="middle" font-size="20" font-weight="bold">Queue</text>
                <foreignObject x="365" y="460" width="290" height="80">
                    <div class="node-message queue">@queueItems</div>
                </foreignObject>
            </g>
            <!-- Queue Trigger Node -->
            <g>
                <rect x="750" y="400" width="320" height="150" rx="20" fill="#8e24aa" />
                <text x="910" y="435" fill="white" text-anchor="middle" font-size="20" font-weight="bold">Queue Trigger</text>
                <foreignObject x="765" y="460" width="290" height="80">
                    <div class="node-message">@queueTriggerMessage</div>
                </foreignObject>
            </g>
            <!-- CosmosDB Node -->
            <g>
                <rect x="1100" y="250" width="250" height="150" rx="20" fill="#d32f2f" />
                <text x="1225" y="285" fill="white" text-anchor="middle" font-size="20" font-weight="bold">CosmosDB</text>
                <foreignObject x="1115" y="300" width="220" height="80">
                    <div class="node-message">@cosmosDbMessage</div>
                </foreignObject>
            </g>

            <!-- Animated Edges -->
            <g>
                <!-- Timer -> Blob -->
                <line x1="290" y1="325" x2="350" y2="135" class="animated-edge" />
                <!-- Timer -> Queue -->
                <line x1="290" y1="325" x2="350" y2="475" class="animated-edge" />
                <!-- Queue -> QueueTrigger -->
                <line x1="670" y1="475" x2="750" y2="475" class="animated-edge" />
                <!-- QueueTrigger -> CosmosDB -->
                <line x1="1070" y1="475" x2="1100" y2="325" class="animated-edge" />
            </g>
        </g>
    </svg>
</div>

@code {
    private string timerMessage = "Timer fires every 5s.\nGenerates and stores a message.";
    private string blobMessage = "Loading...";
    private string queueItems = "Loading...";
    private string queueTriggerMessage = "QueueTrigger updates message and writes to CosmosDB.";
    private string cosmosDbMessage = "Loading...";
    private string pythonCosmosMessage = "Loading...";

    private System.Timers.Timer? refreshTimer;

    private double zoomLevel = 1.0;

    // Pan state
    private double panX = 0;
    private double panY = 0;
    private double lastMouseX;
    private double lastMouseY;
    private bool isPanning = false;

    // For CSS style string
    private string panXpx => $"{panX}px";
    private string panYpx => $"{panY}px";

    protected override void OnInitialized()
    {
        refreshTimer = new System.Timers.Timer(2000);
        refreshTimer.Elapsed += async (_, __) => await RefreshData();
        refreshTimer.AutoReset = true;
        refreshTimer.Start();
    }

    private async Task RefreshData()
    {
        blobMessage = await GetBlobMessageAsync();
        queueItems = await GetQueueItemsAsync();
        cosmosDbMessage = await GetCosmosDbMessageAsync(Constants.CosmosContainerEntries);
        pythonCosmosMessage = await GetCosmosDbMessageAsync(Constants.CosmosContainerPyEntries);
        await InvokeAsync(StateHasChanged);
    }

    private async Task<string> GetCosmosDbMessageAsync(string containerName)
    {
        try
        { 

            var currentMessage = await WeatherApiClient.GetLocalHostCosmosDbMessages(containerName);
            if (currentMessage.ToLower().Contains(Constants.CosmosResultsUnavailableMessage) &&
                !cosmosDbMessage.ToLower().Contains(Constants.CosmosResultsUnavailableMessage))
            {
                // don't show empty queue messages
                return cosmosDbMessage;
            }

            return currentMessage;

        }
        catch (Exception ex)
        {
            return $"Error reading CosmosDB: {ex.Message}";
        }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }

    protected async Task<string> GetBlobMessageAsync()
    {
        try
        {
            return await WeatherApiClient.GetBlobMessageAsync();
        }
        catch (Exception ex)
        {
            return $"Error reading Blob: {ex.Message}";
        }
    }

    protected async Task<string> GetQueueItemsAsync()
    {
        try
        {

            var currentMessage = await WeatherApiClient.GetQueueItemsAsync();
            if(currentMessage.ToLower().Contains(Constants.NoMessagesInQueueMessage) && 
                !queueItems.ToLower().Contains(Constants.NoMessagesInQueueMessage))
            {
                // don't show empty queue messages
                return queueItems;
            }

            return currentMessage;
        }
        catch (Exception ex)
        {
            return $"Error reading Queue: {ex.Message}";
        }
    }

    private void ZoomIn()
    {
        zoomLevel = Math.Min(zoomLevel + 0.1, 2.0);
    }

    private void ZoomOut()
    {
        zoomLevel = Math.Max(zoomLevel - 0.1, 0.5);
    }

    private async Task OnWheel(WheelEventArgs e)
    {
        // e.PreventDefault(); // Uncomment if you want to prevent page scroll
        if (e.DeltaY < 0)
        {
            ZoomIn();
        }
        else if (e.DeltaY > 0)
        {
            ZoomOut();
        }
        await InvokeAsync(StateHasChanged);
    }

    private void OnMouseDown(MouseEventArgs e)
    {
        isPanning = true;
        lastMouseX = e.ClientX;
        lastMouseY = e.ClientY;
    }

    private void OnMouseUp(MouseEventArgs e)
    {
        isPanning = false;
    }

    private void OnMouseMove(MouseEventArgs e)
    {
        if (isPanning)
        {
            var dx = (e.ClientX - lastMouseX) / zoomLevel;
            var dy = (e.ClientY - lastMouseY) / zoomLevel;
            panX += dx;
            panY += dy;
            lastMouseX = e.ClientX;
            lastMouseY = e.ClientY;
            StateHasChanged();
        }
    }
}